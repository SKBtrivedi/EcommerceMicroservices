spring.application.name=ApiGatewayService
server.port=8087

eureka.client.service-url.default-zone=http://localhost:8761/eureka
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true	

#Enable Eureka client to register API Gateway with Eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

# Route to Product Service
spring.cloud.gateway.routes[0].id=PRODUCTSERVICE
spring.cloud.gateway.routes[0].uri=http://localhost:8081/
spring.cloud.gateway.routes[0].predicates[0].name=Path
spring.cloud.gateway.routes[0].predicates[0].args[pattern]=/product/**
#spring.cloud.gateway.routes[0].filters[0]=AddRequestHeader=Authorization, $request.headers.Authorization
#spring.cloud.gateway.routes[0].filters[1]=RewritePath=/product(?<segment>/?.*), /${segment}

# Route to Cart Service
spring.cloud.gateway.routes[1].id=CARTSERVICE
spring.cloud.gateway.routes[1].uri=http://localhost:8082/
spring.cloud.gateway.routes[1].predicates[0].name=Path
spring.cloud.gateway.routes[1].predicates[0].args[pattern]=/cart/**

# Route to Checkout Service
spring.cloud.gateway.routes[2].id=CHECKOUTSERVICE
spring.cloud.gateway.routes[2].uri=http://localhost:8083/
spring.cloud.gateway.routes[2].predicates[0].name=Path
spring.cloud.gateway.routes[2].predicates[0].args[pattern]=/checkout/**

# Route to Price Service
spring.cloud.gateway.routes[3].id=PRICESERVICE
spring.cloud.gateway.routes[3].uri=http://localhost:8085/
spring.cloud.gateway.routes[3].predicates[0].name=Path
spring.cloud.gateway.routes[3].predicates[0].args[pattern]=/price/**

# Route to Product Detail Service
spring.cloud.gateway.routes[4].id=PRODUCTDETAILSERVICE
spring.cloud.gateway.routes[4].uri=http://localhost:8086/
spring.cloud.gateway.routes[4].predicates[0].name=Path
spring.cloud.gateway.routes[4].predicates[0].args[pattern]=/product-detail/**

# OAuth2 Resource Server Configuration
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/ecommerce-realm

# OAuth2 Resource Server JWT Configuration
#spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/ecommerce-realm

debug=true

# Enable DEBUG level logging for Spring Security
logging.level.org.springframework.security=DEBUG
logging.file.name=C:/Users/satyamtrivedi/Downloads/apigateway-debug.log

# Enable DEBUG logging for OAuth2 and JWT components
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.security.oauth2.server.resource=DEBUG
logging.level.org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationProvider=DEBUG


# OAuth2 Client Configuration for Auth0
# OAuth2 Resource Server Configuration for JWT validation
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://dev-um2gcznien77b4iz.us.auth0.com/
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://dev-um2gcznien77b4iz.us.auth0.com/.well-known/jwks.json
spring.security.oauth2.resourceserver.jwt.audience=https://api.satyamapp.com



